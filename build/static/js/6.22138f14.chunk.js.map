{"version":3,"sources":["shared/components/UIElements/Card.js","shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UserPlaces.js"],"names":["Card","props","className","style","children","Map","mapRef","useRef","center","zoom","useEffect","map","window","google","maps","current","Marker","position","ref","PlaceItem","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","useState","showMap","setShowMap","showConfirmModal","setShowConfirmModal","closeMapHandler","cancelDeleteHandler","confirmDeleteHandler","a","process","id","Authorization","token","onDelete","console","log","Fragment","ErrorModal","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","coordinates","inverse","danger","LoadingSpinner","asOverlay","src","image","alt","title","description","userId","creatorId","to","PlaceList","items","length","place","key","creator","location","onDeletePlace","UserPlaces","loadedPlaces","setLoadedPlaces","useParams","responseData","places","fetchPlaces","deletedPlaceId","prevPlaces","filter"],"mappings":"qGAAA,0BAYeA,IARF,SAAAC,GACX,OACE,yBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,OACrDF,EAAMG,Y,wNCoBEC,G,MAxBH,SAAAJ,GAEV,IAAMK,EAASC,mBAEPC,EAAiBP,EAAjBO,OAAQC,EAASR,EAATQ,KAWhB,OATAC,qBAAU,WACR,IAAMC,EAAM,IAAIC,OAAOC,OAAOC,KAAKT,IAAIC,EAAOS,QAAS,CACrDP,OAAQA,EACRC,KAAMA,IAGR,IAAIG,OAAOC,OAAOC,KAAKE,OAAO,CAAEC,SAAUT,EAAQG,IAAKA,MACtD,CAACH,EAAQC,IAGV,yBACES,IAAKZ,EACLJ,UAAS,cAASD,EAAMC,WACxBC,MAAOF,EAAME,U,gCC6EJgB,EAvFG,SAAAlB,GAChB,MAAsDmB,cAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WACjCC,EAAOC,qBAAWC,KAExB,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgDF,oBAAS,GAAzD,mBAAOG,EAAP,KAAyBC,EAAzB,KAIMC,EAAkB,kBAAMH,GAAW,IAMnCI,EAAsB,WAC1BF,GAAoB,IAGhBG,EAAoB,uCAAG,sBAAAC,EAAA,6DAE3BJ,GAAoB,GAFO,kBAKrBT,EAAY,GAAD,OAAIc,qCAAJ,mBAAgDpC,EAAMqC,IAAM,SAAU,KAAM,CAACC,cAAe,UAAYd,EAAKe,QALnG,OAO3BvC,EAAMwC,SAASxC,EAAMqC,IAPM,gDASzBI,QAAQC,IAAR,MATyB,iEAAH,qDAa1B,OAEE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,CAAYvB,MAAOA,EAAOwB,QAAStB,IACjC,kBAACuB,EAAA,EAAD,CACEC,KAAMnB,EACNoB,SAAUhB,EACViB,OAAQjD,EAAMkD,QACdC,aAAa,4BACbC,YAAY,4BACZC,OAAQ,kBAACC,EAAA,EAAD,CAAQC,QAASvB,GAAjB,UAER,yBAAK/B,UAAU,iBACb,kBAAC,EAAD,CAAKM,OAAQP,EAAMwD,YAAahD,KAAM,OAG1C,kBAACsC,EAAA,EAAD,CACAG,OAAO,gBACPF,KAAMjB,EACNkB,SAAUf,EACVmB,YAAY,4BACZC,OACE,kBAAC,IAAMV,SAAP,KACE,kBAACW,EAAA,EAAD,CAAQG,SAAO,EAACF,QAAStB,GAAzB,UACA,kBAACqB,EAAA,EAAD,CAAQI,QAAM,EAACH,QAASrB,GAAxB,YAGF,mHAEJ,wBAAIjC,UAAU,cACZ,kBAACF,EAAA,EAAD,CAAME,UAAU,uBACbmB,GAAa,kBAACuC,EAAA,EAAD,CAAgBC,WAAS,IACvC,yBAAK3D,UAAU,qBACb,yBAAK4D,IAAG,UAAKzB,8CAAL,YAAwCpC,EAAM8D,OAASC,IAAK/D,EAAMgE,SAE5E,yBAAK/D,UAAU,oBACb,4BAAKD,EAAMgE,OACX,4BAAKhE,EAAMkD,SACX,2BAAIlD,EAAMiE,cAEZ,yBAAKhE,UAAU,uBACb,kBAACqD,EAAA,EAAD,CAAQG,SAAO,EAACF,QAlEH,kBAAM1B,GAAW,KAkE9B,oBACCL,EAAK0C,SAAWlE,EAAMmE,WACvB,kBAACb,EAAA,EAAD,CAAQc,GAAE,kBAAapE,EAAMqC,KAA7B,QAECb,EAAK0C,SAAWlE,EAAMmE,WACvB,kBAACb,EAAA,EAAD,CAAQI,QAAM,EAACH,QAnEQ,WAC/BxB,GAAoB,KAkEZ,eCtDGsC,EA9BG,SAAArE,GAEd,OAA2B,IAAvBA,EAAMsE,MAAMC,OAEd,yBAAKtE,UAAU,qBACb,kBAACF,EAAA,EAAD,KACE,kEACA,kBAACuD,EAAA,EAAD,CAAQc,GAAG,eAAX,iBAMC,wBAAInE,UAAU,cAClBD,EAAMsE,MAAM5D,KAAI,SAAA8D,GAAK,OACpB,kBAAC,EAAD,CACEC,IAAKD,EAAMnC,GACXA,GAAImC,EAAMnC,GACVyB,MAAOU,EAAMV,MACbE,MAAOQ,EAAMR,MACbC,YAAaO,EAAMP,YACnBf,QAASsB,EAAMtB,QACfiB,UAAWK,EAAME,QACjBlB,YAAagB,EAAMG,SACnBnC,SAAUxC,EAAM4E,qB,OCiBXC,UAxCI,WACjB,MAAwClD,qBAAxC,mBAAOmD,EAAP,KAAqBC,EAArB,KAGA,EAAsD5D,cAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WAEjC2C,EAASc,cAAYd,OAE3BzD,qBAAU,YACS,uCAAG,4BAAA0B,EAAA,+EAEWb,EAAY,GAAD,OAAIc,qCAAJ,wBAAqD8B,IAF3E,OAEVe,EAFU,OAIhBF,EAAgBE,EAAaC,QAJb,gDAMhBzC,QAAQC,IAAR,MANgB,yDAAH,qDAUjByC,KACC,CAAC7D,EAAa4C,IAOjB,OACE,kBAAC,IAAMvB,SAAP,KACE,kBAACC,EAAA,EAAD,CAAYvB,MAAOA,EAAOwB,QAAStB,IAClCH,GACC,yBAAKnB,UAAU,UACb,kBAAC0D,EAAA,EAAD,QAGFvC,GAAa0D,GAAgB,kBAAC,EAAD,CAAWR,MAAOQ,EAAcF,cAZvC,SAACQ,GAC3BL,GAAgB,SAAAM,GAAU,OAAIA,EAAWC,QAAO,SAAAd,GAAK,OAAIA,EAAMnC,KAAO+C","file":"static/js/6.22138f14.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useRef, useEffect } from \"react\";\nimport './Map.css';\n\nconst Map = props => {\n\n  const mapRef = useRef();\n\n  const { center, zoom } = props;\n\n  useEffect(() => {\n    const map = new window.google.maps.Map(mapRef.current, {\n      center: center,\n      zoom: zoom\n    });\n\n    new window.google.maps.Marker({ position: center, map: map });\n  }, [center, zoom]);\n\n  return (\n    <div \n      ref={mapRef} \n      className={`map ${props.className}`} \n      style={props.style}\n    ></div>\n  );\n};\n\nexport default Map;\n","import React , { useState, useContext }from \"react\";\nimport './PlaceItem.css';\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Modal from \"../../shared/components/UIElements/Modal\";\nimport Map from \"../../shared/components/UIElements/Map\";\nimport AuthContext from \"../../shared/context/auth-context\";\nimport { useHttpClient } from \"../../shared/components/hooks/http-hook\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\n\n\nconst PlaceItem = props => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const auth = useContext(AuthContext);\n\n  const [showMap, setShowMap] = useState(false);\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  const openMapHandler = () => setShowMap(true);\n\n  const closeMapHandler = () => setShowMap(false);\n\n  const showDeleteWarningHandler = () => {\n    setShowConfirmModal(true);\n  }\n\n  const cancelDeleteHandler = () => {\n    setShowConfirmModal(false);\n  }\n\n  const confirmDeleteHandler = async () => {\n    \n    setShowConfirmModal(false);\n    try {\n    // Use sendRequest to send delete req\n    await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/places/${props.id}`, 'DELETE', null, {Authorization: 'Bearer ' + auth.token});\n    // Calls onDelete property from the props forwarded from PlaceList\n    props.onDelete(props.id);\n    } catch (err) {\n      console.log(err)\n    };\n  }\n\n  return (\n\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n        <Modal \n          show={showMap} \n          onCancel={closeMapHandler} \n          header={props.address}\n          contentClass='place-item__modal-content' \n          footerClass='place-item__modal-actions' \n          footer={<Button onClick={closeMapHandler} >Close</Button>} \n        >\n          <div className='map-container'>\n            <Map center={props.coordinates} zoom={16} />\n          </div>\n        </Modal>\n        <Modal \n        header=\"Are you sure?\" \n        show={showConfirmModal} \n        onCancel={cancelDeleteHandler} \n        footerClass=\"place-item__modal-actions\" \n        footer={\n          <React.Fragment>\n            <Button inverse onClick={cancelDeleteHandler}>Cancel</Button>\n            <Button danger onClick={confirmDeleteHandler}>Delete</Button>\n          </React.Fragment>\n        }>\n          <p>Do you want to proceed, and delete this place? Please note that it can't be undone.</p>\n        </Modal>\n      <li className='place-item'>\n        <Card className='place-item__content'>\n          {isLoading && <LoadingSpinner asOverlay />}\n          <div className='place-item__image'>\n            <img src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`} alt={props.title} />\n          </div>\n          <div className='place-item__info'>\n            <h2>{props.title}</h2>\n            <h2>{props.address}</h2>\n            <p>{props.description}</p>\n          </div>\n          <div className='place-item__actions'>\n            <Button inverse onClick={openMapHandler} >Open with Google</Button>\n            {auth.userId === props.creatorId && (\n            <Button to={`/places/${props.id}`}>Edit</Button>\n            )}\n            {auth.userId === props.creatorId && (\n            <Button danger onClick={showDeleteWarningHandler}>Delete</Button>\n            )}\n          </div>\n        </Card>\n      </li>\n    </React.Fragment>\n  );\n}\n\nexport default PlaceItem;","import React from \"react\";\nimport './PlaceList.css'\nimport Card from \"../../shared/components/UIElements/Card\";\nimport PlaceItem from './PlaceItem';\nimport Button from \"../../shared/components/FormElements/Button\";\n\nconst PlaceList = props => {\n  \n    if (props.items.length === 0) {\n      return (\n      <div className='place-list-center'>\n        <Card>\n          <h2>No places found. Maybe create one.</h2>\n          <Button to=\"/places/new\">Share Place</Button>\n        </Card>\n      </div>\n      );\n    }\n\n    return <ul className='place-list'>\n      {props.items.map(place => (\n        <PlaceItem \n          key={place.id} \n          id={place.id} \n          image={place.image} \n          title={place.title} \n          description={place.description} \n          address={place.address} \n          creatorId={place.creator} \n          coordinates={place.location} \n          onDelete={props.onDeletePlace}\n        />\n      ))}\n    </ul>;\n}\n\nexport default PlaceList;","import React, { useEffect, useState } from \"react\";\nimport PlaceList from \"../components/PlaceList\";\nimport { useParams } from 'react-router-dom';\nimport { useHttpClient } from \"../../shared/components/hooks/http-hook\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\n\nconst UserPlaces = () => {\n  const [loadedPlaces, setLoadedPlaces] = useState();\n\n  // Extract these functions\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const userId = useParams().userId;\n\n  useEffect(() => {\n    const fetchPlaces = async () => {\n      try {\n        const responseData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`);\n        // Update state with the data from the backend\n        setLoadedPlaces(responseData.places);\n      } catch (err) {\n        console.log(err)\n      }\n      \n    };\n    fetchPlaces();\n  }, [sendRequest, userId]);\n\n  // Function that re-renders the loaded places after one is deleted. Forwarded to PlaceList via props\n  const placeDeletedHandler = (deletedPlaceId) => {\n    setLoadedPlaces(prevPlaces => prevPlaces.filter(place => place.id !== deletedPlaceId));\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n      {!isLoading && loadedPlaces && <PlaceList items={loadedPlaces} onDeletePlace={placeDeletedHandler} />}\n    </React.Fragment>\n  );\n};\n\nexport default UserPlaces;"],"sourceRoot":""}